Terraform providers manage resources by communicating between Terraform and target APIs. Whenever the target APIs change or add functionality, provider maintainers
may update and version the provider.

When multiple users or automation tools run the same Terraform configuration, they should all use the same versions of their required providers. There are two 
ways for you to manage provider versions in your configuration.

1. Specify provider version constraints in your configuration's terraform block.
2. Use the dependency lock file

Dependency Lock File:
A Terraform configuration may refer to two different kinds of external dependency that come from outside of its own codebase:

. Providers, which are plugins for Terraform that extend it with support for interacting with various external systems.
. Modules, which allow splitting out groups of Terraform configuration constructs (written in the Terraform language) into reusable abstractions.

Both of these dependency types can be published and updated independently from Terraform itself and from the configurations that depend on them. For that reason, 
Terraform must determine which versions of those dependencies are potentially compatible with the current configuration and which versions are currently selected 
for use.

Version constraints within the configuration itself determine which versions of dependencies are potentially compatible, but after selecting a specific version of
each dependency Terraform remembers the decisions it made in a dependency lock file so that it can (by default) make the same decisions again in future

At present, the dependency lock file tracks only provider dependencies. Terraform does not remember version selections for remote modules, and so Terraform will 
always select the newest available module version that meets the specified version constraints. You can use an exact version constraint to ensure that Terraform 
will always select the same module version.

If you do not scope provider version appropriately, Terraform will download the latest provider version that fulfills the version constraint. This may lead to 
unexpected infrastructure changes. By specifying carefully scoped provider versions and using the dependency lock file, you can ensure Terraform is using the 
correct provider version so your configuration is applied consistently.

You will create a S3 bucket from an initialized Terraform configuration. Then, you will ask the Terraform dependency lock file to use the latest version of the 
AWS provider, and edit the Terraform configuration to conform to the new provider version's requirements.

Prerequisites:
This tutorial assumes you are familiar with the standard Terraform workflow. If you are unfamiliar with Terraform, complete the Get Started tutorials first.

For this tutorial, you will need:

Terraform 0.14+ installed locally
an AWS account












