Terraform configurations can include variables to make your configuration more dynamic and flexible.

Set the Instance name with a variable 
The current configuration includes a number of hard-coded values. So the current configuration under the resource block, the tag, name description states the 
name of the EC2 instance we created. Terraform variables allow you to write configuration that is flexible and easier to re-use.

Add a variable to define the instance name.

Create a new file called variables.tf with a block defining a new instance_name variable.

variable "instance_name" {
  description = "Value of the Name tag for the EC2 instance"
  type        = string
  default     = "ExampleAppServerInstance"
}

Note: Terraform loads all files in the current directory ending in .tf, so you can name your configuration files however you choose.

In main.tf, update the aws_instance resource block to use the new variable. The instance_name variable block will default to its default value 
("ExampleAppServerInstance") unless you declare a different value.

resource "aws_instance" "app_server" {
   ami           = "ami-08d70e59c07c61a3a"
   instance_type = "t2.micro"

   tags = {
-    Name = "ExampleAppServerInstance"
+    Name = var.instance_name
   }
 }
 
 Apply your Configuration:
 Apply the configuration. Respond to the confirmation prompt with a yes.
 
 terraform apply 

Now apply the configuration again, this time overriding the default instance name by passing in a variable using the -var flag. Terraform will update the 
instance's Name tag with the new name. Respond to the confirmation prompt with yes.

terraform apply -var "instance_name=YetAnotherName"

So this will set the name of the instance in the configuration under resources and tags to the name you set using the -var flag variable. If you dont then by 
default we have set it to ExampleAppServerInstance









